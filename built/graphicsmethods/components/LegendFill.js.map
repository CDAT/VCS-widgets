{"version":3,"sources":["../../../src/graphicsmethods/components/LegendFill.jsx"],"names":["patterns","LegendFill","props","opacity","color","opacityManual","colormap","length","state","colorChanged","bind","opacityChanged","patternChanged","c","updateFill","pattern","n","e","parseInt","target","value","title","map","k","index","propTypes","array","number","string","func"],"mappings":"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","file":"LegendFill.js","sourcesContent":["import React, { Component } from 'react' \nimport PropTypes from 'prop-types';\nimport ColorProp from '../../validators/ColorProp';\nimport ColorField from './ColorField';\nimport NumberField from '../../common/NumberField';\nimport {FormGroup, ControlLabel, FormControl} from 'react-bootstrap';\n\n\nconst patterns = [\"No Pattern\", \"Triangle\", \"Filled Triangle\", \"Dot\", \"Filled Dot\", \"Horizontal Stripe\",\n                  \"Vertical Stripe\", \"Horizontal Dashes\", \"Vertical Dashes\", \"Diagonal Stripe\",\n                  \"Reverse Diagonal Stripe\", \"Cross\", \"Filled Cross\", \"X Cross\", \"Diamond\", \"Filled Diamond\",\n                  \"Square\", \"Filled Square\", \"Arrow\", \"Circle Cross\", \"Edge Arrow\"];\n\n\n class LegendFill extends Component {\n    constructor(props){\n        super(props)\n        // Calculate an initial value for opacity if none is given to use as placeholder\n        let opacity = this.props.opacity;\n        const color = this.props.color;\n        const opacityManual = opacity === null;\n        if (opacity === null) {\n            if (typeof color === \"string\") {\n                opacity = 100;\n            } else if (typeof color === \"number\") {\n                opacity = this.props.colormap[color][3];\n            } else if (color.length === 4) {\n                opacity = color[3];\n            } else {\n                opacity = 100;\n            }\n        }\n        this.state = {\n            opacity\n        }\n\n        this.colorChanged = this.colorChanged.bind(this)\n        this.opacityChanged = this.opacityChanged.bind(this)\n        this.patternChanged = this.patternChanged.bind(this)\n    }\n    \n    colorChanged(c) {\n        this.props.updateFill({\n            color: c,\n            opacity: this.props.opacity,\n            pattern: this.props.pattern\n        });\n    }\n\n    opacityChanged(n) {\n        this.props.updateFill({\n            color: this.props.color,\n            opacity: n,\n            pattern: this.props.pattern\n        });\n    }\n\n    patternChanged(e) {\n        this.props.updateFill({\n            color: this.props.color,\n            opacity: this.props.opacity,\n            pattern: parseInt(e.target.value)\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-sm-2\">\n                    <ColorField label=\"Fill Color: \" colorChanged={this.colorChanged} inline color={this.props.color} colormap={this.props.colormap} controlId={\"fillcolor_\" + this.props.title} />\n                </div>\n                <div className=\"col-sm-4\">\n                    <NumberField inline updatedValue={this.opacityChanged} label=\"Opacity: \" controlId={\"fillopacity_\" + this.props.title}\n                             step={.1} value={this.props.opacity} placeholder={\"\" + this.state.opacity} />\n                </div>\n                <div className=\"col-sm-4\">\n                    <FormGroup style={{'display': 'inline-block'}} controlId={\"fillpattern_\" + this.props.title}>\n                        <ControlLabel>Pattern</ControlLabel>\n                        <FormControl onChange={this.patternChanged} componentClass=\"select\" placeholder=\"Pattern\">\n                            {patterns.map((k, index) => {\n                                return <option key={k} checked={index == this.props.pattern} value={index}>{k}</option>\n                            })}\n                        </FormControl>\n                    </FormGroup>\n                </div>\n            </div>\n        );\n    }\n}\n\nLegendFill.propTypes = { \n    colormap: PropTypes.array,\n    color: ColorProp,\n    opacity: PropTypes.number,\n    pattern: PropTypes.number,\n    title: PropTypes.string,\n    updateFill: PropTypes.func\n}\n\nexport default LegendFill\n"]}