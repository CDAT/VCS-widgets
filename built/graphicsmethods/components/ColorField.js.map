{"version":3,"sources":["../../../src/graphicsmethods/components/ColorField.jsx"],"names":["rgbToVCS","red","green","blue","alpha","vcsToRGB","Math","round","colornameToRGBA","name","image","document","createElement","style","color","rgb","window","getComputedStyle","substr","length","split","map","parseInt","getRGBA","vcs_color","colormap","apply","Array","isArray","ColorField","props","state","showModal","workingColor","colorValue","openColorPicker","bind","closeColorPicker","updateColor","finalizeColor","e","setState","c","colorChanged","cmap","display","inline","controlId","marginRight","label","propTypes","array","string","func","bool","defaultProps"],"mappings":"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","file":"ColorField.js","sourcesContent":["import React, { Component } from 'react' \nimport PropTypes from 'prop-types'\nimport {FormGroup, ControlLabel, Modal, Button, ButtonToolbar} from 'react-bootstrap'\nimport ColorProp from '../../validators/ColorProp'\nimport ColorButton from './widgets/ColorButton'\nimport ColorPicker from './widgets/ColorPicker'\n\n\nfunction rgbToVCS(red, green, blue, alpha=1) {\n    return [red / 2.55, green / 2.55, blue / 2.55, alpha * 100];\n}\n\nfunction vcsToRGB(red, green, blue, alpha=100) {\n    return [Math.round(red * 2.55), Math.round(green * 2.55), Math.round(blue * 2.55), alpha / 100];\n}\n\nfunction colornameToRGBA(name) {\n    const image = document.createElement(\"img\");\n    image.style.color = name;\n    let rgb = window.getComputedStyle(image);\n    rgb = rgb.substr(4, rgb.length - 5);\n    rgb = rgb.split(\", \").map(parseInt);\n    const red = rgb[0];\n    const green = rgb[1];\n    const blue = rgb[2];\n    const alpha = 1;\n    return [red, green, blue, alpha];\n}\n\nfunction getRGBA(vcs_color, colormap) {\n    let color = [];\n\n    if (typeof vcs_color === \"string\") {\n        color = colornameToRGBA(vcs_color);\n    } else if (typeof vcs_color === \"number\") {\n        color = vcsToRGB.apply(this, colormap[vcs_color]);\n    } else if (Array.isArray(vcs_color)) {\n        color = vcsToRGB.apply(this, vcs_color);\n    }\n\n    return color;\n}\n\n// Accepts a VCS color, converts to RGBA for internal manipulation, spits back out a VCS color\nclass ColorField extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            showModal: false,\n            workingColor: getRGBA(props.color, props.colormap),\n            colorValue: props.color,\n        }\n        this.openColorPicker = this.openColorPicker.bind(this)\n        this.closeColorPicker = this.closeColorPicker.bind(this)\n        this.updateColor = this.updateColor.bind(this)\n        this.finalizeColor = this.finalizeColor.bind(this)\n    }\n\n    openColorPicker(e) {\n        this.setState({\"showModal\": true});\n    }\n\n    closeColorPicker(e) {\n        // Reset the color and hide the modal\n        this.setState({\n            \"workingColor\": getRGBA(this.props.color, this.props.colormap),\n            \"showModal\": false,\n        });\n    }\n\n    updateColor(c) {\n        let workingColor = c;\n        if (typeof c === \"number\") {\n            workingColor = getRGBA(c, this.props.colormap)\n        }\n        this.setState({workingColor: workingColor, colorValue: c});\n    }\n\n    finalizeColor() {\n        this.setState({\"showModal\": false});\n        if (this.state.workingColor === this.state.colorValue) {\n            this.props.colorChanged(rgbToVCS.apply(this, this.state.workingColor));\n        } else {\n            // there's a color index in colorValue\n            this.props.colorChanged(this.state.colorValue);\n        }\n    }\n\n    render() {\n        const color = this.state.workingColor;\n        const cmap = this.props.colormap.map((c) => { return vcsToRGB.apply(this, c)} );\n        const style = {\n            display: this.props.inline ? \"inline-block\" : \"block\"\n        }\n        return (\n            <FormGroup style={style} controlId={this.props.controlId}>\n                <ControlLabel style={{marginRight: '1em'}}>{this.props.label}</ControlLabel>\n                <ColorButton color={getRGBA(this.props.color, this.props.colormap)} action={this.openColorPicker} />\n                <Modal show={this.state.showModal} onHide={(e) => {this.setState({\"showModal\": false})}}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Choose Color:</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <ColorPicker color={color} colormap={cmap} updateCurrentColor={this.updateColor} />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <ButtonToolbar>\n                            <Button onClick={this.closeColorPicker}>Cancel</Button>\n                            <Button onClick={this.finalizeColor} bsStyle=\"primary\">Select</Button>\n                        </ButtonToolbar>\n                    </Modal.Footer>\n                </Modal>\n            </FormGroup>\n        );\n    }\n}\n\nColorField.propTypes = { \n    color: ColorProp,\n    colormap: PropTypes.array,\n    label: PropTypes.string,\n    controlId: PropTypes.string,\n    colorChanged: PropTypes.func,\n    inline: PropTypes.bool\n}\n\nColorField.defaultProps = {\n    inline: false\n}\n\nexport default ColorField;\n"]}