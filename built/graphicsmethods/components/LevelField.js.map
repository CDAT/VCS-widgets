{"version":3,"sources":["../../../src/graphicsmethods/components/LevelField.jsx"],"names":["LevelField","editor","props","value","e","onRemove","ind","onChange","charAt","Array","isArray","console","log"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;IAEqBA,U;;;;;;;;;;;iCACR;AAAA;;AACL,gBAAIC,SAAS,IAAb;AACA,gBAAI,OAAO,KAAKC,KAAL,CAAWC,KAAlB,KAA4B,QAAhC,EAA0C;AACtCF,yBACI;AAAA;AAAA;AACI;AAAA;AAAA,0BAAK,WAAU,KAAf;AACI;AAAA;AAAA,8BAAK,WAAU,WAAf;AACI;AAAA;AAAA;AAAA;AAAA;AADJ;AADJ,qBADJ;AAMI;AAAA;AAAA,0BAAK,WAAU,KAAf;AACI;AAAA;AAAA,8BAAK,WAAU,UAAf;AACI;AAAA;AAAA,kCAAQ,SAAS,iBAACG,CAAD,EAAO;AAAC,+CAAKF,KAAL,CAAWG,QAAX;AAAsB,qCAA/C;AAAiD,wEAAM,WAAU,4BAAhB;AAAjD;AADJ,yBADJ;AAII;AAAA;AAAA,8BAAK,WAAU,WAAf;AACI,mFAAa,WAAW,WAAW,KAAKH,KAAL,CAAWI,GAA9C,EAAmD,UAAU,IAA7D,EAAmE,UAAU,IAA7E,EAAmF,cAAc,KAAKJ,KAAL,CAAWK,QAA5G,EAAsH,MAAM,IAA5H,EAAkI,OAAO,KAAKL,KAAL,CAAWC,KAApJ;AADJ;AAJJ;AANJ,iBADJ;AAiBH,aAlBD,MAkBO,IAAI,OAAO,KAAKD,KAAL,CAAWC,KAAlB,KAA4B,QAAhC,EAA0C;AAC7CF,yBACI;AAAA;AAAA,sBAAW,WAAW,WAAW,KAAKC,KAAL,CAAWI,GAA5C;AACI;AAAA;AAAA;AAAA;AAAA,qBADJ;AAEI,iFAAa,cAAb,EAAsB,OAAO,KAAKJ,KAAL,CAAWC,KAAX,CAAiBK,MAAjB,CAAwB,CAAxB,MAA+B,GAA/B,GAAqC,WAArC,GAAmD,UAAhF;AAFJ,iBADJ;AAMH,aAPM,MAOA,IAAIC,MAAMC,OAAN,CAAc,KAAKR,KAAL,CAAWC,KAAzB,CAAJ,EAAqC;AACxC;AACAQ,wBAAQC,GAAR,CAAY,oDAAZ;AACH;AACD,mBAAOX,MAAP;AACH;;;;;;kBAjCgBD,U","file":"LevelField.js","sourcesContent":["import React, { Component } from 'react';\nimport NumberField from '../../common/NumberField';\nimport {Button, FormGroup, ControlLabel, FormControl} from 'react-bootstrap';\n\nexport default class LevelField extends Component {\n    render() {\n        let editor = null;\n        if (typeof this.props.value === \"number\") {\n            editor = (\n                <div>\n                    <div className=\"row\">\n                        <div className=\"col-sm-12\">\n                            <ControlLabel>Level: </ControlLabel>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-sm-1\">\n                            <Button onClick={(e) => {this.props.onRemove()}}><span className=\"glyphicon glyphicon-remove\"></span></Button>\n                        </div>\n                        <div className=\"col-sm-11\">\n                            <NumberField controlId={\"level_\" + this.props.ind} maxValue={null} minValue={null} updatedValue={this.props.onChange} step={null} value={this.props.value} />\n                        </div>\n                    </div>\n                </div>\n            );\n        } else if (typeof this.props.value === \"string\") {\n            editor = (\n                <FormGroup controlId={\"level_\" + this.props.ind}>\n                    <ControlLabel>Level (legend extension):</ControlLabel>\n                    <FormControl disabled value={this.props.value.charAt(0) === \"-\" ? \"-Infinity\" : \"Infinity\"} />\n                </FormGroup>\n            );\n        } else if (Array.isArray(this.props.value)) {\n            // It's a discontinuous level\n            console.log(\"No support for discontinuous levels at this point.\");\n        }\n        return editor;\n    }\n}"]}