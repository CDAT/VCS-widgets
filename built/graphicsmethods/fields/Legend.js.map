{"version":3,"sources":["../../../src/graphicsmethods/fields/Legend.jsx"],"names":["Legend","props","state","legend","nextProps","setState","className","event","target","value","handleChange","propTypes","updateGraphicsMethod","func","labels","object","levels","array","colors","opacities","patterns","fillStyle","string","showFill","bool"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEMA,M;;;AACF,oBAAYC,KAAZ,EAAkB;AAAA;;AAAA,oHACRA,KADQ;;AAEd,cAAKC,KAAL,GAAa;AACTC,oBAAQ,MAAKF,KAAL,CAAWE;AADV,SAAb;AAFc;AAKjB;;;;kDAEyBC,S,EAAW;AACjC,iBAAKC,QAAL,CAAc;AACVF,wBAAQC,UAAUD;AADR,aAAd;AAGH;;;iCAEQ;AAAA;;AACL,mBACI;AAAA;AAAA,kBAAK,WAAW,KAAKF,KAAL,CAAWK,SAA3B;AACI;AAAA;AAAA;AAAA;AAAA,iBADJ;AAEQ,yDAAO,MAAK,MAAZ;AACI,0BAAK,QADT;AAEI,2BAAO,KAAKJ,KAAL,CAAWC,MAAX,GAAoB,KAAKD,KAAL,CAAWC,MAA/B,GAAuC,EAFlD;AAGI,8BAAU,kBAACI,KAAD,EAAS;AAAC,+BAAKF,QAAL,CAAc,EAACF,QAAOI,MAAMC,MAAN,CAAaC,KAArB,EAAd;AAA2C,qBAHnE;AAII,4BAAQ,KAAKR,KAAL,CAAWS,YAJvB,GAFR;AAOQ,iEAAO,OAAM,4EAAb;AAPR,aADJ;AAWH;;;;;;AAGLV,OAAOW,SAAP,GAAmB;AACfC,0BAAsB,oBAAUC,IADjB;AAEfC,YAAQ,oBAAUC,MAFH;AAGfC,YAAQ,oBAAUC,KAHH;AAIfC,YAAQ,oBAAUD,KAJH;AAKfE,eAAW,oBAAUF,KALN;AAMfG,cAAU,oBAAUH,KANL;AAOfI,eAAW,oBAAUC,MAPN;AAQfC,cAAU,oBAAUC,IARL;AASflB,eAAW,oBAAUgB;AATN,CAAnB;;kBAYetB,M","file":"Legend.js","sourcesContent":["import React, { Component } from 'react' \nimport PropTypes from 'prop-types'\nimport Usage from '../../Usage'\n\nclass Legend extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            legend: this.props.legend,\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            legend: nextProps.legend\n        })\n    }\n\n    render() {\n        return (\n            <div className={this.props.className}>\n                <h5>Legend Labels: </h5>\n                    <input type='text'\n                        name='legend'\n                        value={this.state.legend ? this.state.legend: ''}\n                        onChange={(event)=>{this.setState({legend:event.target.value})}}\n                        onBlur={this.props.handleChange}/>\n                    <Usage usage=\"Specify the desired legend labels () or [] or {} or None to let VCS handle\"/>\n            </div>\n        );\n    }\n}\n\nLegend.propTypes = { \n    updateGraphicsMethod: PropTypes.func,\n    labels: PropTypes.object,\n    levels: PropTypes.array,\n    colors: PropTypes.array,\n    opacities: PropTypes.array,\n    patterns: PropTypes.array,\n    fillStyle: PropTypes.string,\n    showFill: PropTypes.bool,\n    className: PropTypes.string\n}\n\nexport default Legend;\n"]}