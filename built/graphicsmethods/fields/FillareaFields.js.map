{"version":3,"sources":["../../../src/graphicsmethods/fields/FillareaFields.jsx"],"names":["FillareaFields","props","normalizedArrays","bind","sync","updateFill","updateLevel","addLevel","removeLevel","setFillStyle","state","arrays","level","opacity","color","pattern","slice","ext1","ext2","unshift","push","length","last_color","step","Math","floor","nextProps","setState","bulkUpdate","index","fillSettings","start","end","levs","updateGraphicsMethod","val","max","splice","base_arrays","$","extend","normalized","no_ext_len","s","style","hatch","self","levels","map","v","i","l","fills","fill","colormap","components","e","fillStyle","propTypes","func","array","string","bool"],"mappings":"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","file":"FillareaFields.js","sourcesContent":["import React, { Component } from 'react' \nimport PropTypes from 'prop-types';\nimport Usage from '../../Usage';\nimport LegendFill from '../components/LegendFill';\nimport LevelField from '../components/LevelField';\nimport NumberField from '../../common/NumberField';\nimport BooleansField from '../../common/BooleansField';\nimport {FormGroup, ControlLabel, FormControl, Button} from 'react-bootstrap';\n\n\nclass FillareaFields extends Component {\n    constructor(props){\n        super(props)\n        \n        this.normalizedArrays = this.normalizedArrays.bind(this)\n        this.sync = this.sync.bind(this)\n        this.updateFill = this.updateFill.bind(this)\n        this.updateLevel = this.updateLevel.bind(this)\n        this.addLevel = this.addLevel.bind(this)\n        this.removeLevel = this.removeLevel.bind(this)\n        this.setFillStyle = this.setFillStyle.bind(this)\n\n        this.state = this.normalizedArrays(props)\n    }\n\n    normalizedArrays(arrays) {\n        // Normalizes the length of each array\n        let {level, opacity, color, pattern} = arrays;\n        if (level === null) {\n            level = [];\n        }\n        if (opacity === null) {\n            opacity = [100];\n        }\n        if (color === null) {\n            color = [0];\n        }\n        if (pattern == null) {\n            pattern = [0];\n        }\n        // Make sure we're using new arrays in the state\n        level = level.slice();\n        opacity = opacity.slice();\n        color = color.slice();\n        pattern = pattern.slice();\n\n        let ext1 = arrays.ext1, ext2 = arrays.ext2;\n\n        if (ext1) {\n            level.unshift(\"-1e20\");\n        }\n\n        if (ext2) {\n            level.push(\"1e20\");\n        }\n\n        // Pad opacity, colors, and indices out to appropriate length\n        if (color.length < level.length - 1) {\n            let last_color = color[color.length - 1];\n            if (typeof last_color === \"number\") {\n                // Stretch between last_color and 255\n                const step = Math.floor((255 - last_color) / (level.length - 1 - color.length));\n                while (color.length < level.length - 1) {\n                    last_color += step;\n                    color.push(last_color);\n                }\n            } else {\n                // Just duplicate the last color, there's no way to know what they want.\n                while (color.length < level.length - 1) {\n                    color.push(last_color);\n                }\n            }\n        }\n\n        while (opacity.length < level.length - 1) {\n            // We'll just default to using the opacity value of the color\n            opacity.push(null);\n        }\n\n        while (pattern.length < level.length - 1) {\n            pattern.push(0);\n        }\n\n        return {\n            color,\n            pattern,\n            level,\n            opacity\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState(this.normalizedArrays(nextProps));\n    }\n\n    sync(arrays) {\n        let {color, pattern, opacity, level} = arrays;\n        this.props.bulkUpdate({\n            'fillareacolors': color,\n            'fillareaindices': pattern,\n            'fillareaopacity': opacity,\n            'levels': level\n        });\n    }\n\n    updateFill(index, fillSettings) {\n        let {color, pattern, opacity} = this.state;\n        color = color.slice();\n        pattern = pattern.slice();\n        opacity = opacity.slice();\n        color[index] = fillSettings.color;\n        pattern[index] = fillSettings.pattern;\n        opacity[index] = fillSettings.opacity;\n        let start = 0;\n        let end = this.state.level.length;\n        if (this.props.ext1) {\n            start += 1;\n        }\n        if (this.props.ext2) {\n            end -= 1;\n        }\n        const levs = this.state.level.slice(start, end);\n        this.sync({\n            color, pattern, opacity, 'level': levs\n        });\n    }\n\n    updateLevel(index, level) {\n        let levs = this.state.level.slice();\n        // Update the value\n        levs[index] = level;\n        // Now slice off extensions as needed\n        let start = 0;\n        let end = this.state.level.length;\n        if (this.props.ext1) {\n            start = 1;\n        }\n        if (this.props.ext2) {\n            end -= 1;\n        }\n        levs = levs.slice(start, end);\n        this.props.updateGraphicsMethod(\"levels\", levs);\n    }\n\n    addLevel(index) {\n        let levs = this.state.level.slice();\n        let val = levs[index];\n        let start = 0;\n        let end = levs.length + 1;\n        if (this.props.ext1) {\n            val = levs[index + 1];\n            start += 1;\n            index = Math.max(start, index);\n        }\n        if (this.props.ext2) {\n            end -= 1;\n        }\n        levs.splice(index, 0, val);\n        levs = levs.slice(start, end);\n\n        const base_arrays = $.extend({}, this.state);\n        base_arrays.level = levs;\n        const normalized = this.normalizedArrays(base_arrays);\n        normalized.level = levs;\n        this.sync(normalized);\n    }\n\n    removeLevel(index) {\n        let levs = this.state.level.slice();\n        // Prevent them from deleting all of the levels\n        let no_ext_len = levs.length;\n        if (this.props.ext1) {\n            no_ext_len -= 1;\n        }\n        if (this.props.ext2) {\n            no_ext_len -= 1;\n        }\n        if (no_ext_len == 1) {\n            return;\n        }\n        let start = 0;\n        levs.splice(index, 1);\n        let end = levs.length; // it would be +1, but we're removing an element.\n        // Remove the target\n        if (this.props.ext1) {\n            start += 1;\n        }\n        if (this.props.ext2) {\n            end -= 1;\n        }\n        levs = levs.slice(start, end);\n        const base_arrays = $.extend({}, this.state);\n        base_arrays.level = levs;\n        const normalized = this.normalizedArrays(base_arrays);\n        normalized.level = levs;\n        this.sync(normalized);\n    }\n\n    setFillStyle(s) {\n        let style = null;\n        if (s.hatch) {\n            style = \"hatch\";\n        } else if (s.pattern) {\n            style = \"pattern\";\n        } else {\n            style = \"solid\";\n        }\n        this.props.updateGraphicsMethod('fillareastyle', style);\n    }\n\n    render(){\n        const self = this;\n        const levels = this.state.level.map((v, i) => {\n            return (\n                <LevelField value={v} onRemove={() => { self.removeLevel(i); }} onChange={(l) => {self.updateLevel(i, l);}} key={\"lev_\" + i} ind={i} />\n            );\n        });\n        const fills = [];\n        for (let i = 0; i < this.state.color.length; i++) {\n            fills.push(<LegendFill key={\"fill_\" + i} title={i + \"\"} updateFill={(fill) => { self.updateFill(i, fill); }} colormap={this.props.colormap} color={this.state.color[i]} opacity={this.state.opacity[i]} pattern={this.state.pattern[i]} />)\n        }\n\n        const components = [];\n        for (let i = 0; i < levels.length; i++) {\n            components.push(levels[i]);\n            if (i <= levels.length - 1) {\n                components.push(fills[i]);\n            }\n            if (i < levels.length) {\n                if (i == levels.length - 1 && this.props.ext2) {\n                    continue;\n                }\n                let addLevel = () => {\n                    self.addLevel(i);\n                }\n                components.push(<Button key={\"add_\" + i} onClick={(e) => {addLevel()}}><span className=\"glyphicon glyphicon-plus\"></span></Button>);\n            }\n        }\n\n        return (\n            <div>\n                <FormGroup>\n                    <ControlLabel>Fill Style:</ControlLabel>\n                    <BooleansField controlId='fill_style' updatedValue={this.setFillStyle} labels={[\"Solid\", \"Patterned\", \"Hatched\"]} options={[\"solid\", \"pattern\", \"hatch\"]} value={this.props.fillStyle} inline multiple={false} />\n                </FormGroup>\n                <ControlLabel>Levels:</ControlLabel>\n                <div style={{\"border\": \"1px solid #ccc\", \"padding\": \".5em\", \"borderRadius\": \"5px\"}}>\n                    {components}\n                </div>\n            </div>\n        );\n    }\n}\n\nFillareaFields.propTypes = { \n    updateGraphicsMethod: PropTypes.func,\n    bulkUpdate: PropTypes.func,\n    colormap: PropTypes.array,\n    level: PropTypes.array,\n    color: PropTypes.array,\n    opacity: PropTypes.array,\n    pattern: PropTypes.array,\n    fillStyle: PropTypes.string,\n    ext1: PropTypes.bool,\n    ext2: PropTypes.bool\n}\n\nexport default FillareaFields;\n"]}