{"version":3,"sources":["../../../src/graphicsmethods/fields/FillareaFields.jsx"],"names":["FillareaFields","createClass","propTypes","updateGraphicsMethod","PropTypes","func","bulkUpdate","colormap","array","level","color","opacity","pattern","fillStyle","string","ext1","bool","ext2","getInitialState","normalizedArrays","props","arrays","slice","unshift","push","length","last_color","step","Math","floor","componentWillReceiveProps","nextProps","setState","sync","updateFill","index","fillSettings","state","start","end","levs","updateLevel","addLevel","val","max","splice","base_arrays","$","extend","normalized","removeLevel","no_ext_len","setFillStyle","s","style","hatch","render","self","levels","map","v","i","l","fills","fill","components","e"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA,IAAIA,iBAAiB,gBAAMC,WAAN,CAAkB;AAAA;;AACnCC,eAAW;AACPC,8BAAsB,gBAAMC,SAAN,CAAgBC,IAD/B;AAEPC,oBAAY,gBAAMF,SAAN,CAAgBC,IAFrB;AAGPE,kBAAU,gBAAMH,SAAN,CAAgBI,KAHnB;AAIPC,eAAO,gBAAML,SAAN,CAAgBI,KAJhB;AAKPE,eAAO,gBAAMN,SAAN,CAAgBI,KALhB;AAMPG,iBAAS,gBAAMP,SAAN,CAAgBI,KANlB;AAOPI,iBAAS,gBAAMR,SAAN,CAAgBI,KAPlB;AAQPK,mBAAW,gBAAMT,SAAN,CAAgBU,MARpB;AASPC,cAAM,gBAAMX,SAAN,CAAgBY,IATf;AAUPC,cAAM,gBAAMb,SAAN,CAAgBY;AAVf,KADwB;AAanCE,mBAbmC,6BAajB;AACd,eAAO,KAAKC,gBAAL,CAAsB,KAAKC,KAA3B,CAAP;AACH,KAfkC;AAgBnCD,oBAhBmC,4BAgBlBE,MAhBkB,EAgBV;AACrB;AADqB,YAEhBZ,KAFgB,GAEkBY,MAFlB,CAEhBZ,KAFgB;AAAA,YAETE,OAFS,GAEkBU,MAFlB,CAETV,OAFS;AAAA,YAEAD,KAFA,GAEkBW,MAFlB,CAEAX,KAFA;AAAA,YAEOE,OAFP,GAEkBS,MAFlB,CAEOT,OAFP;;AAGrB,YAAIH,UAAU,IAAd,EAAoB;AAChBA,oBAAQ,EAAR;AACH;AACD,YAAIE,YAAY,IAAhB,EAAsB;AAClBA,sBAAU,CAAC,GAAD,CAAV;AACH;AACD,YAAID,UAAU,IAAd,EAAoB;AAChBA,oBAAQ,CAAC,CAAD,CAAR;AACH;AACD,YAAIE,WAAW,IAAf,EAAqB;AACjBA,sBAAU,CAAC,CAAD,CAAV;AACH;AACD;AACAH,gBAAQA,MAAMa,KAAN,EAAR;AACAX,kBAAUA,QAAQW,KAAR,EAAV;AACAZ,gBAAQA,MAAMY,KAAN,EAAR;AACAV,kBAAUA,QAAQU,KAAR,EAAV;;AAEA,YAAIP,OAAOM,OAAON,IAAlB;AAAA,YAAwBE,OAAOI,OAAOJ,IAAtC;;AAEA,YAAIF,IAAJ,EAAU;AACNN,kBAAMc,OAAN,CAAc,OAAd;AACH;;AAED,YAAIN,IAAJ,EAAU;AACNR,kBAAMe,IAAN,CAAW,MAAX;AACH;;AAED;AACA,YAAId,MAAMe,MAAN,GAAehB,MAAMgB,MAAN,GAAe,CAAlC,EAAqC;AACjC,gBAAIC,aAAahB,MAAMA,MAAMe,MAAN,GAAe,CAArB,CAAjB;AACA,gBAAI,OAAOC,UAAP,KAAsB,QAA1B,EAAoC;AAChC;AACA,oBAAMC,OAAOC,KAAKC,KAAL,CAAW,CAAC,MAAMH,UAAP,KAAsBjB,MAAMgB,MAAN,GAAe,CAAf,GAAmBf,MAAMe,MAA/C,CAAX,CAAb;AACA,uBAAOf,MAAMe,MAAN,GAAehB,MAAMgB,MAAN,GAAe,CAArC,EAAwC;AACpCC,kCAAcC,IAAd;AACAjB,0BAAMc,IAAN,CAAWE,UAAX;AACH;AACJ,aAPD,MAOO;AACH;AACA,uBAAOhB,MAAMe,MAAN,GAAehB,MAAMgB,MAAN,GAAe,CAArC,EAAwC;AACpCf,0BAAMc,IAAN,CAAWE,UAAX;AACH;AACJ;AACJ;;AAED,eAAOf,QAAQc,MAAR,GAAiBhB,MAAMgB,MAAN,GAAe,CAAvC,EAA0C;AACtC;AACAd,oBAAQa,IAAR,CAAa,IAAb;AACH;;AAED,eAAOZ,QAAQa,MAAR,GAAiBhB,MAAMgB,MAAN,GAAe,CAAvC,EAA0C;AACtCb,oBAAQY,IAAR,CAAa,CAAb;AACH;;AAED,eAAO;AACHd,wBADG;AAEHE,4BAFG;AAGHH,wBAHG;AAIHE;AAJG,SAAP;AAMH,KAhFkC;AAiFnCmB,6BAjFmC,qCAiFTC,SAjFS,EAiFE;AACjC,aAAKC,QAAL,CAAc,KAAKb,gBAAL,CAAsBY,SAAtB,CAAd;AACH,KAnFkC;AAoFnCE,QApFmC,gBAoF9BZ,MApF8B,EAoFtB;AAAA,YACJX,KADI,GAC8BW,MAD9B,CACJX,KADI;AAAA,YACGE,OADH,GAC8BS,MAD9B,CACGT,OADH;AAAA,YACYD,OADZ,GAC8BU,MAD9B,CACYV,OADZ;AAAA,YACqBF,KADrB,GAC8BY,MAD9B,CACqBZ,KADrB;;AAET,aAAKW,KAAL,CAAWd,UAAX,CAAsB;AAClB,8BAAkBI,KADA;AAElB,+BAAmBE,OAFD;AAGlB,+BAAmBD,OAHD;AAIlB,sBAAUF;AAJQ,SAAtB;AAMH,KA5FkC;AA6FnCyB,cA7FmC,sBA6FxBC,KA7FwB,EA6FjBC,YA7FiB,EA6FH;AAAA,qBACI,KAAKC,KADT;AAAA,YACvB3B,KADuB,UACvBA,KADuB;AAAA,YAChBE,OADgB,UAChBA,OADgB;AAAA,YACPD,OADO,UACPA,OADO;;AAE5BD,gBAAQA,MAAMY,KAAN,EAAR;AACAV,kBAAUA,QAAQU,KAAR,EAAV;AACAX,kBAAUA,QAAQW,KAAR,EAAV;AACAZ,cAAMyB,KAAN,IAAeC,aAAa1B,KAA5B;AACAE,gBAAQuB,KAAR,IAAiBC,aAAaxB,OAA9B;AACAD,gBAAQwB,KAAR,IAAiBC,aAAazB,OAA9B;AACA,YAAI2B,QAAQ,CAAZ;AACA,YAAIC,MAAM,KAAKF,KAAL,CAAW5B,KAAX,CAAiBgB,MAA3B;AACA,YAAI,KAAKL,KAAL,CAAWL,IAAf,EAAqB;AACjBuB,qBAAS,CAAT;AACH;AACD,YAAI,KAAKlB,KAAL,CAAWH,IAAf,EAAqB;AACjBsB,mBAAO,CAAP;AACH;AACD,YAAMC,OAAO,KAAKH,KAAL,CAAW5B,KAAX,CAAiBa,KAAjB,CAAuBgB,KAAvB,EAA8BC,GAA9B,CAAb;AACA,aAAKN,IAAL,CAAU;AACNvB,wBADM,EACCE,gBADD,EACUD,gBADV,EACmB,SAAS6B;AAD5B,SAAV;AAGH,KAjHkC;AAkHnCC,eAlHmC,uBAkHvBN,KAlHuB,EAkHhB1B,KAlHgB,EAkHT;AACtB,YAAI+B,OAAO,KAAKH,KAAL,CAAW5B,KAAX,CAAiBa,KAAjB,EAAX;AACA;AACAkB,aAAKL,KAAL,IAAc1B,KAAd;AACA;AACA,YAAI6B,QAAQ,CAAZ;AACA,YAAIC,MAAM,KAAKF,KAAL,CAAW5B,KAAX,CAAiBgB,MAA3B;AACA,YAAI,KAAKL,KAAL,CAAWL,IAAf,EAAqB;AACjBuB,oBAAQ,CAAR;AACH;AACD,YAAI,KAAKlB,KAAL,CAAWH,IAAf,EAAqB;AACjBsB,mBAAO,CAAP;AACH;AACDC,eAAOA,KAAKlB,KAAL,CAAWgB,KAAX,EAAkBC,GAAlB,CAAP;AACA,aAAKnB,KAAL,CAAWjB,oBAAX,CAAgC,QAAhC,EAA0CqC,IAA1C;AACH,KAjIkC;AAkInCE,YAlImC,oBAkI1BP,KAlI0B,EAkInB;AACZ,YAAIK,OAAO,KAAKH,KAAL,CAAW5B,KAAX,CAAiBa,KAAjB,EAAX;AACA,YAAIqB,MAAMH,KAAKL,KAAL,CAAV;AACA,YAAIG,QAAQ,CAAZ;AACA,YAAIC,MAAMC,KAAKf,MAAL,GAAc,CAAxB;AACA,YAAI,KAAKL,KAAL,CAAWL,IAAf,EAAqB;AACjB4B,kBAAMH,KAAKL,QAAQ,CAAb,CAAN;AACAG,qBAAS,CAAT;AACAH,oBAAQP,KAAKgB,GAAL,CAASN,KAAT,EAAgBH,KAAhB,CAAR;AACH;AACD,YAAI,KAAKf,KAAL,CAAWH,IAAf,EAAqB;AACjBsB,mBAAO,CAAP;AACH;AACDC,aAAKK,MAAL,CAAYV,KAAZ,EAAmB,CAAnB,EAAsBQ,GAAtB;AACAH,eAAOA,KAAKlB,KAAL,CAAWgB,KAAX,EAAkBC,GAAlB,CAAP;;AAEA,YAAMO,cAAcC,EAAEC,MAAF,CAAS,EAAT,EAAa,KAAKX,KAAlB,CAApB;AACAS,oBAAYrC,KAAZ,GAAoB+B,IAApB;AACA,YAAMS,aAAa,KAAK9B,gBAAL,CAAsB2B,WAAtB,CAAnB;AACAG,mBAAWxC,KAAX,GAAmB+B,IAAnB;AACA,aAAKP,IAAL,CAAUgB,UAAV;AACH,KAvJkC;AAwJnCC,eAxJmC,uBAwJvBf,KAxJuB,EAwJhB;AACf,YAAIK,OAAO,KAAKH,KAAL,CAAW5B,KAAX,CAAiBa,KAAjB,EAAX;AACA;AACA,YAAI6B,aAAaX,KAAKf,MAAtB;AACA,YAAI,KAAKL,KAAL,CAAWL,IAAf,EAAqB;AACjBoC,0BAAc,CAAd;AACH;AACD,YAAI,KAAK/B,KAAL,CAAWH,IAAf,EAAqB;AACjBkC,0BAAc,CAAd;AACH;AACD,YAAIA,cAAc,CAAlB,EAAqB;AACjB;AACH;AACD,YAAIb,QAAQ,CAAZ;AACAE,aAAKK,MAAL,CAAYV,KAAZ,EAAmB,CAAnB;AACA,YAAII,MAAMC,KAAKf,MAAf,CAfe,CAeQ;AACvB;AACA,YAAI,KAAKL,KAAL,CAAWL,IAAf,EAAqB;AACjBuB,qBAAS,CAAT;AACH;AACD,YAAI,KAAKlB,KAAL,CAAWH,IAAf,EAAqB;AACjBsB,mBAAO,CAAP;AACH;AACDC,eAAOA,KAAKlB,KAAL,CAAWgB,KAAX,EAAkBC,GAAlB,CAAP;AACA,YAAMO,cAAcC,EAAEC,MAAF,CAAS,EAAT,EAAa,KAAKX,KAAlB,CAApB;AACAS,oBAAYrC,KAAZ,GAAoB+B,IAApB;AACA,YAAMS,aAAa,KAAK9B,gBAAL,CAAsB2B,WAAtB,CAAnB;AACAG,mBAAWxC,KAAX,GAAmB+B,IAAnB;AACA,aAAKP,IAAL,CAAUgB,UAAV;AACH,KArLkC;AAsLnCG,gBAtLmC,wBAsLtBC,CAtLsB,EAsLnB;AACZ,YAAIC,QAAQ,IAAZ;AACA,YAAID,EAAEE,KAAN,EAAa;AACTD,oBAAQ,OAAR;AACH,SAFD,MAEO,IAAID,EAAEzC,OAAN,EAAe;AAClB0C,oBAAQ,SAAR;AACH,SAFM,MAEA;AACHA,oBAAQ,OAAR;AACH;AACD,aAAKlC,KAAL,CAAWjB,oBAAX,CAAgC,eAAhC,EAAiDmD,KAAjD;AACH,KAhMkC;AAiMnCE,UAjMmC,oBAiM3B;AAAA;;AACJ,YAAMC,OAAO,IAAb;AACA,YAAMC,SAAS,KAAKrB,KAAL,CAAW5B,KAAX,CAAiBkD,GAAjB,CAAqB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAC1C,mBACI,sDAAY,OAAOD,CAAnB,EAAsB,UAAU,oBAAM;AAAEH,yBAAKP,WAAL,CAAiBW,CAAjB;AAAsB,iBAA9D,EAAgE,UAAU,kBAACC,CAAD,EAAO;AAACL,yBAAKhB,WAAL,CAAiBoB,CAAjB,EAAoBC,CAApB;AAAwB,iBAA1G,EAA4G,KAAK,SAASD,CAA1H,EAA6H,KAAKA,CAAlI,GADJ;AAGH,SAJc,CAAf;AAKA,YAAME,QAAQ,EAAd;;AAPI,mCAQKF,CARL;AASAE,kBAAMvC,IAAN,CAAW,sDAAY,KAAK,UAAUqC,CAA3B,EAA8B,OAAOA,IAAI,EAAzC,EAA6C,YAAY,oBAACG,IAAD,EAAU;AAAEP,yBAAKvB,UAAL,CAAgB2B,CAAhB,EAAmBG,IAAnB;AAA2B,iBAAhG,EAAkG,UAAU,MAAK5C,KAAL,CAAWb,QAAvH,EAAiI,OAAO,MAAK8B,KAAL,CAAW3B,KAAX,CAAiBmD,CAAjB,CAAxI,EAA6J,SAAS,MAAKxB,KAAL,CAAW1B,OAAX,CAAmBkD,CAAnB,CAAtK,EAA6L,SAAS,MAAKxB,KAAL,CAAWzB,OAAX,CAAmBiD,CAAnB,CAAtM,GAAX;AATA;;AAQJ,aAAK,IAAIA,IAAI,CAAb,EAAgBA,IAAI,KAAKxB,KAAL,CAAW3B,KAAX,CAAiBe,MAArC,EAA6CoC,GAA7C,EAAkD;AAAA,kBAAzCA,CAAyC;AAEjD;;AAED,YAAMI,aAAa,EAAnB;;AAZI,qCAaKJ,CAbL;AAcAI,uBAAWzC,IAAX,CAAgBkC,OAAOG,CAAP,CAAhB;AACA,gBAAIA,KAAKH,OAAOjC,MAAP,GAAgB,CAAzB,EAA4B;AACxBwC,2BAAWzC,IAAX,CAAgBuC,MAAMF,CAAN,CAAhB;AACH;AACD,gBAAIA,IAAIH,OAAOjC,MAAf,EAAuB;AACnB,oBAAIoC,KAAKH,OAAOjC,MAAP,GAAgB,CAArB,IAA0B,MAAKL,KAAL,CAAWH,IAAzC,EAA+C;AAC3C;AACH;AACD,oBAAIyB,WAAW,SAAXA,QAAW,GAAM;AACjBe,yBAAKf,QAAL,CAAcmB,CAAd;AACH,iBAFD;AAGAI,2BAAWzC,IAAX,CAAgB;AAAA;AAAA,sBAAQ,KAAK,SAASqC,CAAtB,EAAyB,SAAS,iBAACK,CAAD,EAAO;AAACxB;AAAW,yBAArD;AAAuD,4DAAM,WAAU,0BAAhB;AAAvD,iBAAhB;AACH;AA1BD;;AAaJ,aAAK,IAAImB,IAAI,CAAb,EAAgBA,IAAIH,OAAOjC,MAA3B,EAAmCoC,GAAnC,EAAwC;AAAA,+BAA/BA,CAA+B;;AAAA,sCAO5B;AAOX;;AAED,eACI;AAAA;AAAA;AACI;AAAA;AAAA;AACI;AAAA;AAAA;AAAA;AAAA,iBADJ;AAEI,yEAAe,WAAU,YAAzB,EAAsC,cAAc,KAAKT,YAAzD,EAAuE,QAAQ,CAAC,OAAD,EAAU,WAAV,EAAuB,SAAvB,CAA/E,EAAkH,SAAS,CAAC,OAAD,EAAU,SAAV,EAAqB,OAArB,CAA3H,EAA0J,OAAO,KAAKhC,KAAL,CAAWP,SAA5K,EAAuL,YAAvL,EAA8L,UAAU,KAAxM;AAFJ,aADJ;AAKI;AAAA;AAAA;AAAA;AAAA,aALJ;AAMI;AAAA;AAAA,kBAAK,OAAO,EAAC,UAAU,gBAAX,EAA6B,WAAW,MAAxC,EAAgD,gBAAgB,KAAhE,EAAZ;AACKoD;AADL;AANJ,SADJ;AAYH;AA1OkC,CAAlB,CAArB;;kBA6OejE,c","file":"FillareaFields.js","sourcesContent":["import React from 'react';\nimport Usage from '../../Usage';\nimport LegendFill from '../components/LegendFill';\nimport LevelField from '../components/LevelField';\nimport NumberField from '../../common/NumberField';\nimport BooleansField from '../../common/BooleansField';\nimport {FormGroup, ControlLabel, FormControl, Button} from 'react-bootstrap';\n\n\nvar FillareaFields = React.createClass({\n    propTypes: {\n        updateGraphicsMethod: React.PropTypes.func,\n        bulkUpdate: React.PropTypes.func,\n        colormap: React.PropTypes.array,\n        level: React.PropTypes.array,\n        color: React.PropTypes.array,\n        opacity: React.PropTypes.array,\n        pattern: React.PropTypes.array,\n        fillStyle: React.PropTypes.string,\n        ext1: React.PropTypes.bool,\n        ext2: React.PropTypes.bool\n    },\n    getInitialState() {\n        return this.normalizedArrays(this.props)\n    },\n    normalizedArrays(arrays) {\n        // Normalizes the length of each array\n        let {level, opacity, color, pattern} = arrays;\n        if (level === null) {\n            level = [];\n        }\n        if (opacity === null) {\n            opacity = [100];\n        }\n        if (color === null) {\n            color = [0];\n        }\n        if (pattern == null) {\n            pattern = [0];\n        }\n        // Make sure we're using new arrays in the state\n        level = level.slice();\n        opacity = opacity.slice();\n        color = color.slice();\n        pattern = pattern.slice();\n\n        let ext1 = arrays.ext1, ext2 = arrays.ext2;\n\n        if (ext1) {\n            level.unshift(\"-1e20\");\n        }\n\n        if (ext2) {\n            level.push(\"1e20\");\n        }\n\n        // Pad opacity, colors, and indices out to appropriate length\n        if (color.length < level.length - 1) {\n            let last_color = color[color.length - 1];\n            if (typeof last_color === \"number\") {\n                // Stretch between last_color and 255\n                const step = Math.floor((255 - last_color) / (level.length - 1 - color.length));\n                while (color.length < level.length - 1) {\n                    last_color += step;\n                    color.push(last_color);\n                }\n            } else {\n                // Just duplicate the last color, there's no way to know what they want.\n                while (color.length < level.length - 1) {\n                    color.push(last_color);\n                }\n            }\n        }\n\n        while (opacity.length < level.length - 1) {\n            // We'll just default to using the opacity value of the color\n            opacity.push(null);\n        }\n\n        while (pattern.length < level.length - 1) {\n            pattern.push(0);\n        }\n\n        return {\n            color,\n            pattern,\n            level,\n            opacity\n        }\n    },\n    componentWillReceiveProps(nextProps) {\n        this.setState(this.normalizedArrays(nextProps));\n    },\n    sync(arrays) {\n        let {color, pattern, opacity, level} = arrays;\n        this.props.bulkUpdate({\n            'fillareacolors': color,\n            'fillareaindices': pattern,\n            'fillareaopacity': opacity,\n            'levels': level\n        });\n    },\n    updateFill(index, fillSettings) {\n        let {color, pattern, opacity} = this.state;\n        color = color.slice();\n        pattern = pattern.slice();\n        opacity = opacity.slice();\n        color[index] = fillSettings.color;\n        pattern[index] = fillSettings.pattern;\n        opacity[index] = fillSettings.opacity;\n        let start = 0;\n        let end = this.state.level.length;\n        if (this.props.ext1) {\n            start += 1;\n        }\n        if (this.props.ext2) {\n            end -= 1;\n        }\n        const levs = this.state.level.slice(start, end);\n        this.sync({\n            color, pattern, opacity, 'level': levs\n        });\n    },\n    updateLevel(index, level) {\n        let levs = this.state.level.slice();\n        // Update the value\n        levs[index] = level;\n        // Now slice off extensions as needed\n        let start = 0;\n        let end = this.state.level.length;\n        if (this.props.ext1) {\n            start = 1;\n        }\n        if (this.props.ext2) {\n            end -= 1;\n        }\n        levs = levs.slice(start, end);\n        this.props.updateGraphicsMethod(\"levels\", levs);\n    },\n    addLevel(index) {\n        let levs = this.state.level.slice();\n        let val = levs[index];\n        let start = 0;\n        let end = levs.length + 1;\n        if (this.props.ext1) {\n            val = levs[index + 1];\n            start += 1;\n            index = Math.max(start, index);\n        }\n        if (this.props.ext2) {\n            end -= 1;\n        }\n        levs.splice(index, 0, val);\n        levs = levs.slice(start, end);\n\n        const base_arrays = $.extend({}, this.state);\n        base_arrays.level = levs;\n        const normalized = this.normalizedArrays(base_arrays);\n        normalized.level = levs;\n        this.sync(normalized);\n    },\n    removeLevel(index) {\n        let levs = this.state.level.slice();\n        // Prevent them from deleting all of the levels\n        let no_ext_len = levs.length;\n        if (this.props.ext1) {\n            no_ext_len -= 1;\n        }\n        if (this.props.ext2) {\n            no_ext_len -= 1;\n        }\n        if (no_ext_len == 1) {\n            return;\n        }\n        let start = 0;\n        levs.splice(index, 1);\n        let end = levs.length; // it would be +1, but we're removing an element.\n        // Remove the target\n        if (this.props.ext1) {\n            start += 1;\n        }\n        if (this.props.ext2) {\n            end -= 1;\n        }\n        levs = levs.slice(start, end);\n        const base_arrays = $.extend({}, this.state);\n        base_arrays.level = levs;\n        const normalized = this.normalizedArrays(base_arrays);\n        normalized.level = levs;\n        this.sync(normalized);\n    },\n    setFillStyle(s) {\n        let style = null;\n        if (s.hatch) {\n            style = \"hatch\";\n        } else if (s.pattern) {\n            style = \"pattern\";\n        } else {\n            style = \"solid\";\n        }\n        this.props.updateGraphicsMethod('fillareastyle', style);\n    },\n    render(){\n        const self = this;\n        const levels = this.state.level.map((v, i) => {\n            return (\n                <LevelField value={v} onRemove={() => { self.removeLevel(i); }} onChange={(l) => {self.updateLevel(i, l);}} key={\"lev_\" + i} ind={i} />\n            );\n        });\n        const fills = [];\n        for (let i = 0; i < this.state.color.length; i++) {\n            fills.push(<LegendFill key={\"fill_\" + i} title={i + \"\"} updateFill={(fill) => { self.updateFill(i, fill); }} colormap={this.props.colormap} color={this.state.color[i]} opacity={this.state.opacity[i]} pattern={this.state.pattern[i]} />)\n        }\n\n        const components = [];\n        for (let i = 0; i < levels.length; i++) {\n            components.push(levels[i]);\n            if (i <= levels.length - 1) {\n                components.push(fills[i]);\n            }\n            if (i < levels.length) {\n                if (i == levels.length - 1 && this.props.ext2) {\n                    continue;\n                }\n                let addLevel = () => {\n                    self.addLevel(i);\n                }\n                components.push(<Button key={\"add_\" + i} onClick={(e) => {addLevel()}}><span className=\"glyphicon glyphicon-plus\"></span></Button>);\n            }\n        }\n\n        return (\n            <div>\n                <FormGroup>\n                    <ControlLabel>Fill Style:</ControlLabel>\n                    <BooleansField controlId='fill_style' updatedValue={this.setFillStyle} labels={[\"Solid\", \"Patterned\", \"Hatched\"]} options={[\"solid\", \"pattern\", \"hatch\"]} value={this.props.fillStyle} inline multiple={false} />\n                </FormGroup>\n                <ControlLabel>Levels:</ControlLabel>\n                <div style={{\"border\": \"1px solid #ccc\", \"padding\": \".5em\", \"borderRadius\": \"5px\"}}>\n                    {components}\n                </div>\n            </div>\n        );\n    }\n});\n\nexport default FillareaFields;\n"]}