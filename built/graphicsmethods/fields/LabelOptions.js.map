{"version":3,"sources":["../../../src/graphicsmethods/fields/LabelOptions.jsx"],"names":["LabelOptions","props","handleLabelToggle","bind","event","value","target","checked","updateGraphicsMethod","labeled","label","border","padding","borderRadius","marginLeft","label_skip_distance","v","propTypes","func","oneOfType","string","number","bool","label_background_colors","arrayOf","label_background_opacities"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;;;;;;;IAEMA,Y;;;AACF;AACA,0BAAYC,KAAZ,EAAkB;AAAA;;AAAA,gIACRA,KADQ;;AAEd,cAAKC,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBC,IAAvB,OAAzB;AAFc;AAGjB;;;;0CAEiBC,K,EAAO;AACrB,gBAAMC,QAAQD,MAAME,MAAN,CAAaC,OAAb,KAAyB,IAAzB,GAAgC,GAAhC,GAAsC,GAApD;AACA,iBAAKN,KAAL,CAAWO,oBAAX,CAAgC,OAAhC,EAAyCH,KAAzC;AACH;;;iCAEO;AAAA;;AACJ,iBAAKI,OAAL,GAAe,KAAKR,KAAL,CAAWS,KAAX,KAAqB,GAArB,IAA4B,KAAKT,KAAL,CAAWS,KAAX,KAAqB,CAAjD,IAAsD,KAAKT,KAAL,CAAWS,KAAX,KAAqB,IAA3E,GAAkF,IAAlF,GAAyF,KAAxG;AACA,mBACI;AAAA;AAAA;AACI;AAAA;AAAA,sBAAM,YAAN;AACI;AAAA;AAAA,0BAAW,WAAU,cAArB;AACI;AAAA;AAAA;AAAA;AAAA,yBADJ;AAC0C,2BAD1C;AAEI;AACI,qCAAS,KAAKD,OADlB;AAEI,sCAAU,KAAKP;AAFnB;AAFJ;AADJ,iBADJ;AAWQ,qBAAKO,OAAL,GACI;AAAA;AAAA,sBAAK,WAAU,KAAf,EAAqB,OAAO,EAACE,QAAQ,gBAAT,EAA2BC,SAAS,MAApC,EAA4CC,cAAc,KAA1D,EAAiEC,YAAY,MAA7E,EAA5B;AACI;AAAA;AAAA,0BAAK,WAAU,UAAf;AACI;AACI,uCAAU,mBADd;AAEI,mCAAM,sBAFV;AAGI,sCAAU,CAHd;AAII,sCAAU,IAJd;AAKI,kCAAM,EALV;AAMI,mCAAO,KAAKb,KAAL,CAAWc,mBANtB;AAOI,0CAAc,sBAACC,CAAD,EAAO;AAAC,uCAAKf,KAAL,CAAWO,oBAAX,CAAgC,mBAAhC,EAAqDQ,CAArD;AAAwD;AAPlF;AADJ;AADJ,iBADJ,GAeI;AA1BZ,aADJ;AA+BH;;;;;;AAGLhB,aAAaiB,SAAb,GAAyB;AACrBT,0BAAsB,oBAAUU,IADX;AAErBR,WAAO,oBAAUS,SAAV,CAAoB,CAAE;AACzB,wBAAUC,MADa,EAEvB,oBAAUC,MAFa,EAGvB,oBAAUC,IAHa,CAApB,CAFc;AAOrBP,yBAAqB,oBAAUM,MAPV;AAQrBE,6BAAyB,oBAAUC,OAAV,CAAkB,oBAAUH,MAA5B,CARJ;AASrBI,gCAA4B,oBAAUJ;AATjB,CAAzB;;kBAYerB,Y","file":"LabelOptions.js","sourcesContent":["import React, { Component } from 'react' \nimport PropTypes from 'prop-types'\nimport { Checkbox, Form, FormGroup, ControlLabel } from 'react-bootstrap'\nimport NumberField from '../../common/NumberField'\n\nclass LabelOptions extends Component {\n    // This component \n    constructor(props){\n        super(props)\n        this.handleLabelToggle = this.handleLabelToggle.bind(this)\n    }\n    \n    handleLabelToggle(event) {\n        const value = event.target.checked === true ? 'y' : 'n'\n        this.props.updateGraphicsMethod(\"label\", value)\n    }\n\n    render(){\n        this.labeled = this.props.label === 'y' || this.props.label === 1 || this.props.label === true ? true : false\n        return (\n            <div>\n                <Form inline>\n                    <FormGroup controlId=\"label-toggle\">\n                        <ControlLabel>Labels: </ControlLabel>{' '}\n                        <Checkbox \n                            checked={this.labeled}\n                            onChange={this.handleLabelToggle}\n                        />\n                    </FormGroup>\n                </Form>\n                {\n                    this.labeled ? \n                        <div className='row' style={{border: \"1px solid #ccc\", padding: \".5em\", borderRadius: \"5px\", marginLeft: \"auto\"}}>\n                            <div className='col-md-4'>\n                                <NumberField\n                                    controlId=\"labelskipdistance\"\n                                    label=\"Label Skip Distance:\"\n                                    minValue={1}\n                                    maxValue={null}\n                                    step={.1}\n                                    value={this.props.label_skip_distance}\n                                    updatedValue={(v) => {this.props.updateGraphicsMethod(\"labelskipdistance\", v)}}\n                                />\n                            </div>\n                        </div>\n                    : \n                        null\n                }\n            </div>\n        )\n    }\n}\n\nLabelOptions.propTypes = { \n    updateGraphicsMethod: PropTypes.func,\n    label: PropTypes.oneOfType([ // Should be a 'y' or a 1 for true, and an 'n' or 0 for false\n        PropTypes.string,\n        PropTypes.number,\n        PropTypes.bool,\n    ]),\n    label_skip_distance: PropTypes.number,\n    label_background_colors: PropTypes.arrayOf(PropTypes.number),\n    label_background_opacities: PropTypes.number,\n}\n\nexport default LabelOptions\n"]}