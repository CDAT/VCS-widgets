{"version":3,"sources":["../../../src/graphicsmethods/fields/ColorOneTwo.jsx"],"names":["usage","name","html_start","trailer","html_end","ColorOneTwo","createClass","propTypes","updateGraphicsMethod","PropTypes","func","color1","number","color2","colormap","array","updateColor1","val","props","updateColor2","getInitialState","showColormap","render","self","colors","map","c","red","green","blue","alpha","Math","round","state","e","setState","findDOMNode","colorTarget","v","color_1","b","color_2"],"mappings":"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","file":"ColorOneTwo.js","sourcesContent":["import React from 'react';\nimport Usage from '../../Usage';\nimport ColorButton from '../components/widgets/ColorButton';\nimport ColorTable from '../components/widgets/ColorTable';\nimport {ControlLabel, FormGroup, Overlay, Popover} from 'react-bootstrap';\nimport ReactDOM from 'react-dom';\n\n\nfunction usage(name, html_start='', trailer='', html_end='') {\n    return html_start + name + \" property must be an integer >= 0 and <=255. \" + trailer + html_end\n}\n\nvar ColorOneTwo = React.createClass({\n    propTypes: {\n        updateGraphicsMethod: React.PropTypes.func,\n        color1: React.PropTypes.number,\n        color2: React.PropTypes.number,\n        colormap: React.PropTypes.array\n    },\n    updateColor1(val) {\n        this.props.updateGraphicsMethod(\"color_1\", val);\n    },\n    updateColor2(val) {\n        this.props.updateGraphicsMethod(\"color_2\", val);\n    },\n    getInitialState() {\n        return {\n            showColormap: false\n        }\n    },\n    render(){\n        const self = this;\n        const colors = this.props.colormap.map((c) => {\n            let red = c[0], green = c[1], blue = c[2], alpha = c[3];\n            return [Math.round(red * 2.55), Math.round(green * 2.55), Math.round(blue * 2.55), alpha / 100]\n        });\n        return (\n            <div>\n                <Overlay rootClose show={this.state.showColormap} onHide={(e) => { this.setState({showColormap: false}); }} target={() => { ReactDOM.findDOMNode(this.state.colorTarget); }} container={this}>\n                    <Popover id=\"color_one_two_colortable\" style={{'minWidth': '512px'}}>\n                        <ColorTable colors={colors} colorSelected={(v) => {\n                            if (self.state.colorTarget === this.color_1) {\n                                self.updateColor1(v);\n                            } else {\n                                self.updateColor2(v);\n                            }\n                            self.setState({\"showColormap\": false});\n                        }} />\n                    </Popover>\n                </Overlay>\n                <FormGroup controlId=\"color1\">\n                    <ControlLabel>First Color: </ControlLabel>\n                    <ColorButton ref={(b) => { this.color_1 = b; }}\n                                 color={colors[this.props.color1]}\n                                 action={(e) => {\n                                    if (self.state.colorTarget == self.color_1) {\n                                        self.setState({showColormap: !self.state.showColormap});\n                                    } else {\n                                        self.setState({colorTarget: self.color_1, showColormap: true});\n                                    }\n                                  }} />\n                </FormGroup>\n                <FormGroup controlId=\"color2\">\n                    <ControlLabel>Last Color: </ControlLabel>\n                    <ColorButton ref={(b) => { this.color_2 = b; }}\n                                 color={colors[this.props.color2]}\n                                 action={(e) => {\n                                    if (self.state.colorTarget == self.color_2) {\n                                        self.setState({showColormap: !self.state.showColormap});\n                                    } else {\n                                        self.setState({colorTarget: self.color_2, showColormap: true});\n                                    }\n                                  }} />\n                </FormGroup>\n            </div>\n        );\n    }\n});\n\nexport default ColorOneTwo;\n"]}