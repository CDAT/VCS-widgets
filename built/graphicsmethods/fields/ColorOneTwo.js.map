{"version":3,"sources":["../../../src/graphicsmethods/fields/ColorOneTwo.jsx"],"names":["usage","name","html_start","trailer","html_end","ColorOneTwo","props","state","showColormap","updateColor1","bind","updateColor2","val","updateGraphicsMethod","self","colors","colormap","map","c","red","green","blue","alpha","Math","round","e","setState","findDOMNode","colorTarget","v","color_1","b","color1","color_2","color2","propTypes","func","number","array"],"mappings":"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","file":"ColorOneTwo.js","sourcesContent":["import React, { Component } from 'react' \nimport PropTypes from 'prop-types';\nimport Usage from '../../Usage';\nimport ColorButton from '../components/widgets/ColorButton';\nimport ColorTable from '../components/widgets/ColorTable';\nimport {ControlLabel, FormGroup, Overlay, Popover} from 'react-bootstrap';\nimport ReactDOM from 'react-dom';\n\n\nfunction usage(name, html_start='', trailer='', html_end='') {\n    return html_start + name + \" property must be an integer >= 0 and <=255. \" + trailer + html_end\n}\n\nclass ColorOneTwo extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            showColormap: false\n        }\n        this.updateColor1 = this.updateColor1.bind(this)\n        this.updateColor2 = this.updateColor2.bind(this)\n    }\n    \n    updateColor1(val) {\n        this.props.updateGraphicsMethod(\"color_1\", val);\n    }\n\n    updateColor2(val) {\n        this.props.updateGraphicsMethod(\"color_2\", val);\n    }\n    \n    render(){\n        const self = this;\n        const colors = this.props.colormap.map((c) => {\n            let red = c[0], green = c[1], blue = c[2], alpha = c[3];\n            return [Math.round(red * 2.55), Math.round(green * 2.55), Math.round(blue * 2.55), alpha / 100]\n        });\n        return (\n            <div>\n                <Overlay rootClose show={this.state.showColormap} onHide={(e) => { this.setState({showColormap: false}); }} target={() => { ReactDOM.findDOMNode(this.state.colorTarget); }} container={this}>\n                    <Popover id=\"color_one_two_colortable\" style={{'minWidth': '512px'}}>\n                        <ColorTable colors={colors} colorSelected={(v) => {\n                            if (self.state.colorTarget === this.color_1) {\n                                self.updateColor1(v);\n                            } else {\n                                self.updateColor2(v);\n                            }\n                            self.setState({\"showColormap\": false});\n                        }} />\n                    </Popover>\n                </Overlay>\n                <FormGroup controlId=\"color1\">\n                    <ControlLabel>First Color: </ControlLabel>\n                    <ColorButton ref={(b) => { this.color_1 = b; }}\n                                 color={colors[this.props.color1]}\n                                 action={(e) => {\n                                    if (self.state.colorTarget == self.color_1) {\n                                        self.setState({showColormap: !self.state.showColormap});\n                                    } else {\n                                        self.setState({colorTarget: self.color_1, showColormap: true});\n                                    }\n                                  }} />\n                </FormGroup>\n                <FormGroup controlId=\"color2\">\n                    <ControlLabel>Last Color: </ControlLabel>\n                    <ColorButton ref={(b) => { this.color_2 = b; }}\n                                 color={colors[this.props.color2]}\n                                 action={(e) => {\n                                    if (self.state.colorTarget == self.color_2) {\n                                        self.setState({showColormap: !self.state.showColormap});\n                                    } else {\n                                        self.setState({colorTarget: self.color_2, showColormap: true});\n                                    }\n                                  }} />\n                </FormGroup>\n            </div>\n        );\n    }\n}\n\nColorOneTwo.propTypes = { \n    updateGraphicsMethod: PropTypes.func,\n    color1: PropTypes.number,\n    color2: PropTypes.number,\n    colormap: PropTypes.array\n}\n\nexport default ColorOneTwo;\n"]}