{"version":3,"sources":["../../src/validators/ColorProp.js"],"names":["color","props","propName","componentName","value","image","document","createElement","style","stringToTest","Error","Array","isArray","length","reduce","prev","cur"],"mappings":";;;;;AAAA,SAASA,KAAT,CAAeC,KAAf,EAAsBC,QAAtB,EAAgCC,aAAhC,EAA+C;AAC7CA,oBAAgBA,iBAAiB,WAAjC;;AAEA,QAAIF,MAAMC,QAAN,CAAJ,EAAqB;AACnB,YAAIE,QAAQH,MAAMC,QAAN,CAAZ;AACA,YAAI,OAAOE,KAAP,KAAiB,QAArB,EAA+B;AAC3B;AACA;AACA;AACA,gBAAIC,QAAQC,SAASC,aAAT,CAAuB,KAAvB,CAAZ;AACAF,kBAAMG,KAAN,CAAYR,KAAZ,GAAoB,cAApB;AACAK,kBAAMG,KAAN,CAAYR,KAAZ,GAAoBS,YAApB;AACA,gBAAIJ,MAAMG,KAAN,CAAYR,KAAZ,KAAsB,cAA1B,EAA0C;AAAE,uBAAO,IAAP;AAAc;AAC1DK,kBAAMG,KAAN,CAAYR,KAAZ,GAAoB,oBAApB;AACAK,kBAAMG,KAAN,CAAYR,KAAZ,GAAoBS,YAApB;AACA,gBAAIJ,MAAMG,KAAN,CAAYR,KAAZ,KAAsB,oBAA1B,EAAgD;AAC5C,uBAAO,IAAP;AACH;AACD,mBAAOU,MAAM,qDAAN,CAAP;AACH,SAdD,MAcO,IAAI,OAAON,KAAP,KAAiB,QAArB,EAA+B;AAClC,gBAAIA,SAAS,CAAT,IAAcA,SAAS,GAA3B,EAAgC;AAC5B,uBAAO,IAAP;AACH,aAFD,MAEO;AACH,uBAAOM,MAAM,4DAAN,CAAP;AACH;AACJ,SANM,MAMA,IAAIC,MAAMC,OAAN,CAAcR,KAAd,CAAJ,EAA0B;AAC7B,gBAAIA,MAAMS,MAAN,GAAe,CAAf,IAAoBT,MAAMS,MAAN,GAAe,CAAnC,IAAwCT,MAAMU,MAAN,CAAa,UAASC,IAAT,EAAeC,GAAf,EAAoB;AAAE,uBAAOD,QAASC,OAAO,CAAP,IAAYA,OAAO,GAAnC;AAA0C,aAA7E,EAA+E,IAA/E,CAA5C,EAAkI;AAC9H,uBAAO,IAAP;AACH,aAFD,MAEO;AACH,uBAAON,MAAM,iEAAN,CAAP;AACH;AACJ;AACD,eAAOA,MAAM,kHAAN,CAAP;AACD;AACD;AACA,WAAO,IAAP;AACD;;kBAEcV,K","file":"ColorProp.js","sourcesContent":["function color(props, propName, componentName) {\n  componentName = componentName || 'ANONYMOUS';\n\n  if (props[propName]) {\n    let value = props[propName];\n    if (typeof value === 'string') {\n        // make sure it's a valid CSS string by setting\n        // a style and seeing if it changes the color\n        // CSS color names are the same as the ones we use in VCS\n        var image = document.createElement(\"img\");\n        image.style.color = \"rgb(0, 0, 0)\";\n        image.style.color = stringToTest;\n        if (image.style.color !== \"rgb(0, 0, 0)\") { return null; }\n        image.style.color = \"rgb(255, 255, 255)\";\n        image.style.color = stringToTest;\n        if (image.style.color !== \"rgb(255, 255, 255)\") {\n            return null;\n        }\n        return Error(\"Invalid color name. Must be a valid X11 Color Name.\");\n    } else if (typeof value === 'number') {\n        if (value >= 0 && value <= 255) {\n            return null;\n        } else {\n            return Error(\"Invalid color index. Must be between 0 and 255, inclusive.\");\n        }\n    } else if (Array.isArray(value)) {\n        if (value.length > 2 && value.length < 5 && value.reduce(function(prev, cur) { return prev && (cur >= 0 && cur <= 100); }, true)) {\n            return null;\n        } else {\n            return Error(\"Invalid color array. Must have 3 or 4 values between 0 and 100.\");\n        }\n    }\n    return Error(\"Invalid color. Must be one of: X11 Color Name String, 256 > number >= 0, or list of numbers 0-100 (RGB or RGBA).\");\n  }\n  // assume all ok\n  return null;\n}\n\nexport default color;"]}