{"version":3,"sources":["../../src/common/NumberField.jsx"],"names":["parseNum","v","indexOf","parts","split","main","parseFloat","exp","parseInt","Math","pow","shouldExponentiate","isNaN","isFinite","absval","abs","frac","floor","log10","numregexp","NumberField","createClass","propTypes","value","PropTypes","number","minValue","maxvalue","updatedValue","func","label","string","controlId","step","autoround","bool","placeholder","exponential","inline","getDefaultProps","maxValue","getInitialState","validationState","props","componentWillReceiveProps","nextProps","setState","update","e","new_val","target","validate","new_state","test","render","state","help","numval","unsigned","rest","style","display"],"mappings":"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","file":"NumberField.js","sourcesContent":["import React from 'react'\nimport {FormControl, FormGroup, ControlLabel, HelpBlock} from 'react-bootstrap'\n\n\nfunction parseNum(v) {\n    if (typeof v === \"string\") {\n        if (v.indexOf(\"e\") != -1) {\n            let parts = v.split(\"e\");\n            const main = parseFloat(parts[0]);\n            const exp = parseInt(parts[1]);\n            v = Math.pow(10, exp) * main;\n        } else {\n            v = parseFloat(v);\n        }\n    }\n    return v;\n}\n\nfunction shouldExponentiate(v) {\n    if (isNaN(v) || !isFinite(v)) {\n        return false;\n    }\n    let absval = Math.abs(v);\n    if (absval >= 1e10) {\n        return true;\n    }\n    if (v === 0) {\n        // will break logarithms; also, not needed.\n        return false;\n    }\n\n    let frac = absval - Math.floor(absval)\n    if (frac === 0) {\n        return false;\n    }\n    if (Math.log10(frac) < -10) {\n        return true;\n    }\n\n    return false;\n}\n\nconst numregexp = /-?\\d*\\.\\d*(e\\d+)?/\n\n\nvar NumberField = React.createClass({\n    propTypes: {\n        value: React.PropTypes.number,\n        minValue: React.PropTypes.number,\n        maxvalue: React.PropTypes.number,\n        updatedValue: React.PropTypes.func,\n        label: React.PropTypes.string,\n        controlId: React.PropTypes.string,\n        step: React.PropTypes.number,\n        autoround: React.PropTypes.bool,\n        placeholder: React.PropTypes.string,\n        exponential: React.PropTypes.bool,\n        inline: React.PropTypes.bool\n    },\n    getDefaultProps() {\n        return {\n            inline: false,\n            minValue: 0,\n            maxValue: 100,\n            step: 1,\n            autoround: false,\n            placeholder: \"\",\n            exponential: true\n        }\n    },\n    getInitialState() {\n        return {\n            validationState: null,\n            value: this.props.value\n        }\n    },\n    componentWillReceiveProps(nextProps) {\n        this.setState({\"value\": nextProps.value, \"validationState\": null});\n    },\n    update(e) {\n        let new_val = e.target.value;\n        if (this.props.exponential) {\n            new_val = parseNum(new_val);\n        }\n        if (new_val !== this.props.value) {\n            if (this.props.autoround) {\n                this.props.updatedValue(Math.floor(new_val / this.props.step) * this.props.step);\n            } else {\n                this.props.updatedValue(new_val);\n            }\n        }\n    },\n    validate(e) {\n        let new_val = e.target.value;\n\n        const new_state = {\n            \"value\": e.target.value, //Use the provided value, just make sure it's valid.\n            \"validationState\": \"success\"\n        };\n\n        if (!numregexp.test(new_val)) {\n            // Invalid number\n            new_state.validationState  = \"error\";\n        }\n\n        // Check value limits\n        new_val = parseNum(new_val);\n\n        if (this.props.minValue !== null && new_val < this.props.minValue) {\n            new_state.validationState = \"error\";\n        }\n        if (this.props.maxValue !== null && new_val > this.props.maxValue) {\n            new_state.validationState = \"error\";\n        }\n        this.setState(new_state);\n    },\n    render() {\n        let {minValue, step, maxValue, label, controlId, placeholder} = this.props;\n\n        let value = this.state.value;\n\n        let help = '';\n        if (this.state.validationState === \"warning\" || this.state.validationState === \"error\") {\n            help = <HelpBlock>Value must be between a valid number {minValue === null ? \"greater than \" + minValue : \"\"} {minValue !== null && maxValue !== null ? \" and \" : \"\"} {maxValue !== null ? \" less than \" + maxValue : \"\"}</HelpBlock>\n        }\n        if (value === null) {\n            value = \"\";\n        }\n        const numval = parseNum(value);\n        if (this.props.exponential && shouldExponentiate(numval)) {\n            let unsigned = Math.abs(numval);\n            let exp = Math.floor(Math.log10(unsigned));\n            let rest = numval / Math.pow(10, exp);\n            value = rest + \"e\" + exp;\n        }\n        const style = {\n            display: this.props.inline ? \"inline-block\" : \"block\"\n        }\n        return (\n            <FormGroup style={style} controlId={controlId}>\n                {label ? <ControlLabel>{label}</ControlLabel> : ''}\n                <FormControl placeholder={placeholder} onChange={this.validate} onBlur={this.update} value={value} />\n                {help}\n            </FormGroup>\n        );\n    }\n});\n\nexport default NumberField;\n"]}