{"version":3,"sources":["../../src/common/NumberField.jsx"],"names":["parseNum","v","indexOf","parts","split","main","parseFloat","exp","parseInt","Math","pow","shouldExponentiate","isNaN","isFinite","absval","abs","frac","floor","log10","NumberField","props","state","validationState","value","update","bind","validate","nextProps","setState","e","new_val","target","exponential","autoround","updatedValue","step","new_state","Number","minValue","maxValue","label","controlId","placeholder","help","numval","unsigned","rest","style","display","inline","propTypes","number","func","string","bool","defaultProps"],"mappings":"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","file":"NumberField.js","sourcesContent":["import React, { Component } from 'react' \nimport PropTypes from 'prop-types'\nimport { FormControl, FormGroup, ControlLabel, HelpBlock } from 'react-bootstrap'\n\n\nfunction parseNum(v) {\n    if (typeof v === \"string\") {\n        if (v.indexOf(\"e\") != -1) {\n            let parts = v.split(\"e\");\n            const main = parseFloat(parts[0]);\n            const exp = parseInt(parts[1]);\n            v = Math.pow(10, exp) * main;\n        } else {\n            v = parseFloat(v);\n        }\n    }\n    return v;\n}\n\nfunction shouldExponentiate(v) {\n    if (isNaN(v) || !isFinite(v)) {\n        return false\n    }\n    let absval = Math.abs(v)\n    if (absval >= 1e10) {\n        return true\n    }\n    if (v === 0) {\n        // will break logarithms; also, not needed.\n        return false\n    }\n\n    let frac = absval - Math.floor(absval)\n    if (frac === 0) {\n        return false\n    }\n    if (Math.log10(frac) < -10) {\n        return true\n    }\n\n    return false\n}\n\nclass NumberField extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            validationState: null,\n            value: props.value\n        }\n        this.update = this.update.bind(this)\n        this.validate = this.validate.bind(this)\n    }\n    \n    componentWillReceiveProps(nextProps) {\n        this.setState({\"value\": nextProps.value, \"validationState\": null})\n    }\n\n    update(e) {\n        let new_val = e.target.value\n        if (this.props.exponential) {\n            new_val = parseNum(new_val)\n        }\n        if (new_val !== this.props.value) {\n            if (this.props.autoround) {\n                this.props.updatedValue(Math.floor(new_val / this.props.step) * this.props.step)\n            } else {\n                this.props.updatedValue(new_val)\n            }\n        }\n    }\n\n    validate(e) {\n        let new_val = e.target.value\n\n        const new_state = {\n            \"value\": e.target.value, //Use the provided value, just make sure it's valid.\n            \"validationState\": \"success\"\n        }\n\n        if (isNaN(Number(new_val))) {\n            // Invalid number\n            new_state.validationState  = \"error\"\n        }\n\n        // Check value limits\n        new_val = parseNum(new_val)\n\n        if (this.props.minValue !== null && new_val < this.props.minValue) {\n            new_state.validationState = \"error\"\n        }\n        if (this.props.maxValue !== null && new_val > this.props.maxValue) {\n            new_state.validationState = \"error\"\n        }\n        this.setState(new_state)\n    }\n\n    render() {\n        let {minValue, maxValue, label, controlId, placeholder} = this.props;\n\n        let value = this.state.value\n\n        let help = ''\n        if (this.state.validationState === \"warning\" || this.state.validationState === \"error\") {\n            if(minValue !== null && maxValue ==! null){\n                help = <HelpBlock>Value must be a valid number, {\"greater than \" + minValue} and {\"less than \" + maxValue}</HelpBlock>\n            }\n            else if(minValue !== null){\n                help = <HelpBlock>Value must be a valid number, {\"greater than \" + minValue}</HelpBlock>\n            }\n            else if(maxValue !== null){\n                help = <HelpBlock>Value must be a valid number, {maxValue !== null ? \"less than \" + maxValue : \"\"}</HelpBlock>\n            }\n            else{\n                help = <HelpBlock>Value must be a valid number</HelpBlock>\n            }\n\n        }\n\n        if (value === null) {\n            value = \"\"\n        }\n\n        const numval = parseNum(value)\n        if (this.props.exponential && shouldExponentiate(numval)) {\n            let unsigned = Math.abs(numval)\n            let exp = Math.floor(Math.log10(unsigned))\n            let rest = numval / Math.pow(10, exp)\n            value = rest + \"e\" + exp\n        }\n\n        const style = {\n            display: this.props.inline ? \"inline-block\" : \"block\"\n        }\n\n        return (\n            <FormGroup style={style} controlId={controlId}>\n                {label ? <ControlLabel>{label}</ControlLabel> : ''}\n                <FormControl placeholder={placeholder} onChange={this.validate} onBlur={this.update} value={value} />\n                {help}\n            </FormGroup>\n        )\n    }\n}\n\nNumberField.propTypes = {\n    value: PropTypes.number,\n    minValue: PropTypes.number,\n    maxValue: PropTypes.number,\n    updatedValue: PropTypes.func,\n    label: PropTypes.string,\n    controlId: PropTypes.string,\n    step: PropTypes.number,\n    autoround: PropTypes.bool,\n    placeholder: PropTypes.string,\n    exponential: PropTypes.bool,\n    inline: PropTypes.bool\n}\n\nNumberField.defaultProps = {\n    inline: false,\n    minValue: 0,\n    maxValue: 100,\n    step: 1,\n    autoround: false,\n    placeholder: \"\",\n    exponential: true\n}\n\nexport default NumberField\n"]}